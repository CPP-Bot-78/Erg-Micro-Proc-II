
askisi2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000172  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002800  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002248  00000000  00000000  00002a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000314  00000000  00000000  00004cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  00004fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000013f9  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000102  00000000  00000000  00006439  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000653b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_23>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_29>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  a0:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <main>:



int main(void)
{	
	PORTD.DIR |= 0b00000111; //last 3 PINs are output
  a8:	e0 e6       	ldi	r30, 0x60	; 96
  aa:	f4 e0       	ldi	r31, 0x04	; 4
  ac:	80 81       	ld	r24, Z
  ae:	87 60       	ori	r24, 0x07	; 7
  b0:	80 83       	st	Z, r24
	PORTD.OUT |= 0b00000111; //LEDs are off
  b2:	84 81       	ldd	r24, Z+4	; 0x04
  b4:	87 60       	ori	r24, 0x07	; 7
  b6:	84 83       	std	Z+4, r24	; 0x04
	PORTF.PIN5CTRL |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
  b8:	e0 ea       	ldi	r30, 0xA0	; 160
  ba:	f4 e0       	ldi	r31, 0x04	; 4
  bc:	85 89       	ldd	r24, Z+21	; 0x15
  be:	89 60       	ori	r24, 0x09	; 9
  c0:	85 8b       	std	Z+21, r24	; 0x15
    while (1) 
    {
      
      //initialize the ADC for Free-Running mode
      ADC0.CTRLA |= ADC_RESSEL_10BIT_gc; //10-bit resolution
  c2:	e0 e0       	ldi	r30, 0x00	; 0
  c4:	f6 e0       	ldi	r31, 0x06	; 6
  c6:	80 81       	ld	r24, Z
  c8:	80 83       	st	Z, r24
      ADC0.CTRLA |= ADC_FREERUN_bm; //Free-Running mode enabled
  ca:	80 81       	ld	r24, Z
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	80 83       	st	Z, r24
      ADC0.CTRLA |= ADC_ENABLE_bm; //Enable ADC
  d0:	80 81       	ld	r24, Z
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	80 83       	st	Z, r24
      ADC0.MUXPOS |= ADC_MUXPOS_AIN7_gc; //The bit //Enable Debug Mode
  d6:	86 81       	ldd	r24, Z+6	; 0x06
  d8:	87 60       	ori	r24, 0x07	; 7
  da:	86 83       	std	Z+6, r24	; 0x06
      ADC0.DBGCTRL |= ADC_DBGRUN_bm; //Window Comparator Mode
  dc:	84 85       	ldd	r24, Z+12	; 0x0c
  de:	81 60       	ori	r24, 0x01	; 1
  e0:	84 87       	std	Z+12, r24	; 0x0c
      ADC0.WINLT |= 10; //Set threshold
  e2:	82 89       	ldd	r24, Z+18	; 0x12
  e4:	93 89       	ldd	r25, Z+19	; 0x13
  e6:	8a 60       	ori	r24, 0x0A	; 10
  e8:	82 8b       	std	Z+18, r24	; 0x12
  ea:	93 8b       	std	Z+19, r25	; 0x13
      ADC0.INTCTRL |= ADC_WCMP_bm; //Enable Interrupts for WCM
  ec:	82 85       	ldd	r24, Z+10	; 0x0a
  ee:	82 60       	ori	r24, 0x02	; 2
  f0:	82 87       	std	Z+10, r24	; 0x0a
      ADC0.CTRLE |= ADC_WINCM0_bm; //Interrupt when RESULT < WINLT
  f2:	84 81       	ldd	r24, Z+4	; 0x04
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	84 83       	std	Z+4, r24	; 0x04
      sei();
  f8:	78 94       	sei
      ADC0.COMMAND |= ADC_STCONV_bm; //Start Conversion
  fa:	80 85       	ldd	r24, Z+8	; 0x08
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	80 87       	std	Z+8, r24	; 0x08
 100:	ff cf       	rjmp	.-2      	; 0x100 <__EEPROM_REGION_LENGTH__>

00000102 <__vector_23>:
        ;
      }
    }
}

ISR(ADC0_WCOMP_vect){
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	8f 93       	push	r24
 10e:	ef 93       	push	r30
 110:	ff 93       	push	r31
  int intflags = ADC0.INTFLAGS;
 112:	e0 e0       	ldi	r30, 0x00	; 0
 114:	f6 e0       	ldi	r31, 0x06	; 6
 116:	83 85       	ldd	r24, Z+11	; 0x0b
  ADC0.INTFLAGS = intflags;
 118:	83 87       	std	Z+11, r24	; 0x0b
  PORTD.OUTCLR= PIN1_bm; //LED is on
 11a:	e0 e6       	ldi	r30, 0x60	; 96
 11c:	f4 e0       	ldi	r31, 0x04	; 4
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	86 83       	std	Z+6, r24	; 0x06
  //delay_ms(5);
  PORTD.OUT |= PIN1_bm; //LED is off
 122:	84 81       	ldd	r24, Z+4	; 0x04
 124:	82 60       	ori	r24, 0x02	; 2
 126:	84 83       	std	Z+4, r24	; 0x04
} 
 128:	ff 91       	pop	r31
 12a:	ef 91       	pop	r30
 12c:	8f 91       	pop	r24
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <__vector_29>:

ISR(PORTF_PORT_vect)//
{
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	8f 93       	push	r24
 144:	ef 93       	push	r30
 146:	ff 93       	push	r31
    int y = PORTF.INTFLAGS;
 148:	e0 ea       	ldi	r30, 0xA0	; 160
 14a:	f4 e0       	ldi	r31, 0x04	; 4
 14c:	81 85       	ldd	r24, Z+9	; 0x09
    PORTF.INTFLAGS=y;
 14e:	81 87       	std	Z+9, r24	; 0x09
    PORTD.OUT |= 0b00000111; //LEDs are off
 150:	e0 e6       	ldi	r30, 0x60	; 96
 152:	f4 e0       	ldi	r31, 0x04	; 4
 154:	84 81       	ldd	r24, Z+4	; 0x04
 156:	87 60       	ori	r24, 0x07	; 7
 158:	84 83       	std	Z+4, r24	; 0x04
    PORTD.OUTCLR= 0b00000111; //all Leds are ON
 15a:	87 e0       	ldi	r24, 0x07	; 7
 15c:	86 83       	std	Z+6, r24	; 0x06
 15e:	ff 91       	pop	r31
 160:	ef 91       	pop	r30
 162:	8f 91       	pop	r24
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
