
ask4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  0000052e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00802800  00802800  0000052e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000052e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000560  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000309f  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022cf  00000000  00000000  00003697  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005fd  00000000  00000000  00005966  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00005f64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000176e  00000000  00000000  000060cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003cd  00000000  00000000  0000783a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00007c07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__vector_7>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 11 02 	jmp	0x422	; 0x422 <__vector_9>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__vector_23>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__vector_29>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_clear_bss>:
  9c:	28 e2       	ldi	r18, 0x28	; 40
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	aa 30       	cpi	r26, 0x0A	; 10
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  b0:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <main>:
int correct_pass = 0; //counts up to 4, then password is correct

int main()
{
	//Ports #####
	PORTD.DIR |= 0b00000001;
  b8:	e0 e6       	ldi	r30, 0x60	; 96
  ba:	f4 e0       	ldi	r31, 0x04	; 4
  bc:	80 81       	ld	r24, Z
  be:	81 60       	ori	r24, 0x01	; 1
  c0:	80 83       	st	Z, r24
	PORTD.OUT |= PIN0_bm; //LED is off
  c2:	84 81       	ldd	r24, Z+4	; 0x04
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	84 83       	std	Z+4, r24	; 0x04
	PORTF.PIN5CTRL |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
  c8:	e0 ea       	ldi	r30, 0xA0	; 160
  ca:	f4 e0       	ldi	r31, 0x04	; 4
  cc:	85 89       	ldd	r24, Z+21	; 0x15
  ce:	89 60       	ori	r24, 0x09	; 9
  d0:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
  d2:	86 89       	ldd	r24, Z+22	; 0x16
  d4:	89 60       	ori	r24, 0x09	; 9
  d6:	86 8b       	std	Z+22, r24	; 0x16
	//TCA #####
	TCA0.SINGLE.INTCTRL = TCA_SINGLE_OVF_bm;    //enable interrupt Overflow
  d8:	e0 e0       	ldi	r30, 0x00	; 0
  da:	fa e0       	ldi	r31, 0x0A	; 10
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	82 87       	std	Z+10, r24	; 0x0a
	TCA0.SINGLE.INTCTRL |= TCA_SINGLE_CMP0_bm;  //enable interrupt COMP0
  e0:	82 85       	ldd	r24, Z+10	; 0x0a
  e2:	80 61       	ori	r24, 0x10	; 16
  e4:	82 87       	std	Z+10, r24	; 0x0a
	// ADC #####
	ADC0.MUXPOS |= ADC_MUXPOS_AIN7_gc; //Enable Debug Mode
  e6:	e0 e0       	ldi	r30, 0x00	; 0
  e8:	f6 e0       	ldi	r31, 0x06	; 6
  ea:	86 81       	ldd	r24, Z+6	; 0x06
  ec:	87 60       	ori	r24, 0x07	; 7
  ee:	86 83       	std	Z+6, r24	; 0x06
	ADC0.DBGCTRL |= ADC_DBGRUN_bm; //Window Comparator Mode
  f0:	84 85       	ldd	r24, Z+12	; 0x0c
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	84 87       	std	Z+12, r24	; 0x0c
	ADC0.WINLT |= 10; //Set threshold
  f6:	82 89       	ldd	r24, Z+18	; 0x12
  f8:	93 89       	ldd	r25, Z+19	; 0x13
  fa:	8a 60       	ori	r24, 0x0A	; 10
  fc:	82 8b       	std	Z+18, r24	; 0x12
  fe:	93 8b       	std	Z+19, r25	; 0x13
	ADC0.INTCTRL |= ADC_WCMP_bm; //Enable Interrupts for WCM
 100:	82 85       	ldd	r24, Z+10	; 0x0a
 102:	82 60       	ori	r24, 0x02	; 2
 104:	82 87       	std	Z+10, r24	; 0x0a
	ADC0.CTRLE |= ADC_WINCM0_bm; //Interrupt when RESULT < WINLT
 106:	84 81       	ldd	r24, Z+4	; 0x04
 108:	81 60       	ori	r24, 0x01	; 1
 10a:	84 83       	std	Z+4, r24	; 0x04
	sei();
 10c:	78 94       	sei
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__EEPROM_REGION_LENGTH__+0xe>

00000110 <enabling>:
	sei();
}

void enabling()
{
	if(correct_pass == 0 || correct_pass == 2) // correct pass =1,3 ->6 || 0,2 ->5
 110:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 114:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 118:	00 97       	sbiw	r24, 0x00	; 0
 11a:	19 f0       	breq	.+6      	; 0x122 <enabling+0x12>
 11c:	82 30       	cpi	r24, 0x02	; 2
 11e:	91 05       	cpc	r25, r1
 120:	d1 f4       	brne	.+52     	; 0x156 <enabling+0x46>
	{
		if( (pin5on == PORTF.INTFLAGS) || (pin56on == PORTF.INTFLAGS) )
 122:	20 91 a9 04 	lds	r18, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
 126:	20 32       	cpi	r18, 0x20	; 32
 128:	21 f0       	breq	.+8      	; 0x132 <enabling+0x22>
 12a:	20 91 a9 04 	lds	r18, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
 12e:	20 36       	cpi	r18, 0x60	; 96
 130:	49 f4       	brne	.+18     	; 0x144 <enabling+0x34>
		{
			correct_pass++;
 132:	01 96       	adiw	r24, 0x01	; 1
 134:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
 138:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
			int y = pin5on;
			PORTF.INTFLAGS=y;
 13c:	80 e2       	ldi	r24, 0x20	; 32
 13e:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
void enabling()
{
	if(correct_pass == 0 || correct_pass == 2) // correct pass =1,3 ->6 || 0,2 ->5
	{
		if( (pin5on == PORTF.INTFLAGS) || (pin56on == PORTF.INTFLAGS) )
		{
 142:	24 c0       	rjmp	.+72     	; 0x18c <enabling+0x7c>
			int y = pin5on;
			PORTF.INTFLAGS=y;
		}
		else
		{
			correct_pass=0;
 144:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
 148:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
			int y = PORTF.INTFLAGS;
 14c:	e0 ea       	ldi	r30, 0xA0	; 160
 14e:	f4 e0       	ldi	r31, 0x04	; 4
 150:	81 85       	ldd	r24, Z+9	; 0x09
			PORTF.INTFLAGS=y;
 152:	81 87       	std	Z+9, r24	; 0x09
 154:	1b c0       	rjmp	.+54     	; 0x18c <enabling+0x7c>
		}
	}
	else if(correct_pass == 1 || correct_pass == 3)
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	91 05       	cpc	r25, r1
 15a:	19 f0       	breq	.+6      	; 0x162 <enabling+0x52>
 15c:	83 30       	cpi	r24, 0x03	; 3
 15e:	91 05       	cpc	r25, r1
 160:	a9 f4       	brne	.+42     	; 0x18c <enabling+0x7c>
	{
		if(pin6on == PORTF.INTFLAGS)
 162:	20 91 a9 04 	lds	r18, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
 166:	20 34       	cpi	r18, 0x40	; 64
 168:	49 f4       	brne	.+18     	; 0x17c <enabling+0x6c>
		{
			correct_pass++;
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
 170:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
			int y = pin6on;
			PORTF.INTFLAGS=y;
 174:	80 e4       	ldi	r24, 0x40	; 64
 176:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
 17a:	08 c0       	rjmp	.+16     	; 0x18c <enabling+0x7c>
		}
		else
		{
			correct_pass=0;
 17c:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
 180:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
			int y = PORTF.INTFLAGS;
 184:	e0 ea       	ldi	r30, 0xA0	; 160
 186:	f4 e0       	ldi	r31, 0x04	; 4
 188:	81 85       	ldd	r24, Z+9	; 0x09
			PORTF.INTFLAGS=y;
 18a:	81 87       	std	Z+9, r24	; 0x09
		}
	}
	if(correct_pass == 4)
 18c:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 190:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 194:	04 97       	sbiw	r24, 0x04	; 4
 196:	b1 f4       	brne	.+44     	; 0x1c4 <enabling+0xb4>
	{
		correct_pass =0;
 198:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
 19c:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
		TCA0.SINGLE.CTRLB = 0;//normal
 1a0:	e0 e0       	ldi	r30, 0x00	; 0
 1a2:	fa e0       	ldi	r31, 0x0A	; 10
 1a4:	11 82       	std	Z+1, r1	; 0x01
		TCA0.SINGLE.CTRLA = 0x7<<1; //TCA_SINGLE_CLKSEL_DIV1024_gc
 1a6:	8e e0       	ldi	r24, 0x0E	; 14
 1a8:	80 83       	st	Z, r24
		TCA0.SINGLE.CNT = 0; //clear counter
 1aa:	10 a2       	std	Z+32, r1	; 0x20
 1ac:	11 a2       	std	Z+33, r1	; 0x21
		TCA0.SINGLE.CMP0 = 3; //count up to 20 to get out
 1ae:	83 e0       	ldi	r24, 0x03	; 3
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	80 a7       	std	Z+40, r24	; 0x28
 1b4:	91 a7       	std	Z+41, r25	; 0x29
		TCA0.SINGLE.CTRLA |=1;//Enable
 1b6:	80 81       	ld	r24, Z
 1b8:	81 60       	ori	r24, 0x01	; 1
 1ba:	80 83       	st	Z, r24
		int y = PORTF.INTFLAGS;
 1bc:	e0 ea       	ldi	r30, 0xA0	; 160
 1be:	f4 e0       	ldi	r31, 0x04	; 4
 1c0:	81 85       	ldd	r24, Z+9	; 0x09
		PORTF.INTFLAGS=y;
 1c2:	81 87       	std	Z+9, r24	; 0x09
 1c4:	08 95       	ret

000001c6 <__vector_7>:
		PORTF.INTFLAGS=y;
	}
}

ISR(TCA0_OVF_vect)
{
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
 1d0:	8f 93       	push	r24
 1d2:	ef 93       	push	r30
 1d4:	ff 93       	push	r31
	cli();
 1d6:	f8 94       	cli
	int intflags =TCA0.SINGLE.INTFLAGS;
 1d8:	e0 e0       	ldi	r30, 0x00	; 0
 1da:	fa e0       	ldi	r31, 0x0A	; 10
 1dc:	83 85       	ldd	r24, Z+11	; 0x0b
	TCA0.SINGLE.INTFLAGS = intflags;
 1de:	83 87       	std	Z+11, r24	; 0x0b
	PORTD.OUTCLR = PIN0_bm; //LED is on
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f4466>
	sei();
 1e6:	78 94       	sei
}
 1e8:	ff 91       	pop	r31
 1ea:	ef 91       	pop	r30
 1ec:	8f 91       	pop	r24
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <__vector_23>:
	TCA0.SINGLE.INTFLAGS = intflags;
	sei();
}

ISR(ADC0_WCOMP_vect)// na mhn metraei o metrhths synexeia
{
 1f8:	1f 92       	push	r1
 1fa:	0f 92       	push	r0
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	0f 92       	push	r0
 200:	11 24       	eor	r1, r1
 202:	8f 93       	push	r24
 204:	9f 93       	push	r25
 206:	af 93       	push	r26
 208:	bf 93       	push	r27
 20a:	ef 93       	push	r30
 20c:	ff 93       	push	r31
	cli();
 20e:	f8 94       	cli
	ADC0.INTCTRL = 0; //Disable Interrupts for WCM
 210:	a0 e0       	ldi	r26, 0x00	; 0
 212:	b6 e0       	ldi	r27, 0x06	; 6
 214:	1a 96       	adiw	r26, 0x0a	; 10
 216:	1c 92       	st	X, r1
 218:	1a 97       	sbiw	r26, 0x0a	; 10
	PORTD.OUTCLR= PIN0_bm; //LED 0 is on
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f4466>
	alarm_mode=1;//to get in the right path from portf isr
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	80 93 06 28 	sts	0x2806, r24	; 0x802806 <alarm_mode>
 228:	90 93 07 28 	sts	0x2807, r25	; 0x802807 <alarm_mode+0x1>
	alarm_brake=1; //ready to brake in tca cmp isr ,//einai o metrhthts ths adc
 22c:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <alarm_brake>
 230:	90 93 03 28 	sts	0x2803, r25	; 0x802803 <alarm_brake+0x1>
	TCA0.SINGLE.CTRLB = 0;//normal
 234:	e0 e0       	ldi	r30, 0x00	; 0
 236:	fa e0       	ldi	r31, 0x0A	; 10
 238:	11 82       	std	Z+1, r1	; 0x01
	TCA0.SINGLE.CTRLA = 0x7<<1; //TCA_SINGLE_CLKSEL_DIV1024_gc
 23a:	8e e0       	ldi	r24, 0x0E	; 14
 23c:	80 83       	st	Z, r24
	TCA0.SINGLE.CNT = 0; //clear counter
 23e:	10 a2       	std	Z+32, r1	; 0x20
 240:	11 a2       	std	Z+33, r1	; 0x21
	TCA0.SINGLE.CMP0 = 3; //count up to 30 to start the alarm
 242:	83 e0       	ldi	r24, 0x03	; 3
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	80 a7       	std	Z+40, r24	; 0x28
 248:	91 a7       	std	Z+41, r25	; 0x29
	TCA0.SINGLE.CTRLA |=1;//Enable
 24a:	80 81       	ld	r24, Z
 24c:	81 60       	ori	r24, 0x01	; 1
 24e:	80 83       	st	Z, r24
	int intflags = ADC0.INTFLAGS;
 250:	1b 96       	adiw	r26, 0x0b	; 11
 252:	8c 91       	ld	r24, X
 254:	1b 97       	sbiw	r26, 0x0b	; 11
	ADC0.INTFLAGS = intflags;
 256:	1b 96       	adiw	r26, 0x0b	; 11
 258:	8c 93       	st	X, r24
	sei();
 25a:	78 94       	sei
}
 25c:	ff 91       	pop	r31
 25e:	ef 91       	pop	r30
 260:	bf 91       	pop	r27
 262:	af 91       	pop	r26
 264:	9f 91       	pop	r25
 266:	8f 91       	pop	r24
 268:	0f 90       	pop	r0
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	0f 90       	pop	r0
 26e:	1f 90       	pop	r1
 270:	18 95       	reti

00000272 <alarm>:

void alarm()
{
	alarm_brake=0;//gia na mhn ksanaboume ston timer stin alarm
 272:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <alarm_brake>
 276:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <alarm_brake+0x1>
	alarm_count++;//gia na mhn ksanabei se aythn thn synarthsh
 27a:	80 91 08 28 	lds	r24, 0x2808	; 0x802808 <alarm_count>
 27e:	90 91 09 28 	lds	r25, 0x2809	; 0x802809 <alarm_count+0x1>
 282:	01 96       	adiw	r24, 0x01	; 1
 284:	80 93 08 28 	sts	0x2808, r24	; 0x802808 <alarm_count>
 288:	90 93 09 28 	sts	0x2809, r25	; 0x802809 <alarm_count+0x1>
	timer_mode=1; //pwm mode in tca cmp isr
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <timer_mode>
 294:	90 93 05 28 	sts	0x2805, r25	; 0x802805 <timer_mode+0x1>
	TCA0.SINGLE.CTRLA = 0;
 298:	e0 e0       	ldi	r30, 0x00	; 0
 29a:	fa e0       	ldi	r31, 0x0A	; 10
 29c:	10 82       	st	Z, r1
	TCA0.SINGLE.CNT=0;
 29e:	10 a2       	std	Z+32, r1	; 0x20
 2a0:	11 a2       	std	Z+33, r1	; 0x21
	TCA0.SINGLE.CTRLA=TCA_SINGLE_CLKSEL_DIV1024_gc;
 2a2:	8e e0       	ldi	r24, 0x0E	; 14
 2a4:	80 83       	st	Z, r24
	TCA0.SINGLE.PER = 6; //resolution
 2a6:	86 e0       	ldi	r24, 0x06	; 6
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	86 a3       	std	Z+38, r24	; 0x26
 2ac:	97 a3       	std	Z+39, r25	; 0x27
	TCA0.SINGLE.CMP0 = 3; //duty cycle
 2ae:	83 e0       	ldi	r24, 0x03	; 3
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	80 a7       	std	Z+40, r24	; 0x28
 2b4:	91 a7       	std	Z+41, r25	; 0x29
	TCA0.SINGLE.CTRLB |= TCA_SINGLE_WGMODE_SINGLESLOPE_gc;  //select Single_Slope_PWM
 2b6:	81 81       	ldd	r24, Z+1	; 0x01
 2b8:	83 60       	ori	r24, 0x03	; 3
 2ba:	81 83       	std	Z+1, r24	; 0x01
	TCA0.SINGLE.CTRLA |=1;//Enable
 2bc:	80 81       	ld	r24, Z
 2be:	81 60       	ori	r24, 0x01	; 1
 2c0:	80 83       	st	Z, r24
 2c2:	08 95       	ret

000002c4 <disabling>:
	}
}

void disabling()
{
	if (alarm_count==3) alarm();
 2c4:	80 91 08 28 	lds	r24, 0x2808	; 0x802808 <alarm_count>
 2c8:	90 91 09 28 	lds	r25, 0x2809	; 0x802809 <alarm_count+0x1>
 2cc:	03 97       	sbiw	r24, 0x03	; 3
 2ce:	11 f4       	brne	.+4      	; 0x2d4 <disabling+0x10>
 2d0:	0e 94 39 01 	call	0x272	; 0x272 <alarm>
	if(correct_pass == 0 || correct_pass == 2) // correct pass =1,3 ->6 || 0,2 ->5
 2d4:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 2d8:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 2dc:	00 97       	sbiw	r24, 0x00	; 0
 2de:	19 f0       	breq	.+6      	; 0x2e6 <disabling+0x22>
 2e0:	82 30       	cpi	r24, 0x02	; 2
 2e2:	91 05       	cpc	r25, r1
 2e4:	19 f5       	brne	.+70     	; 0x32c <disabling+0x68>
	{
		if( (pin5on == PORTF.INTFLAGS) || (pin56on == PORTF.INTFLAGS) )
 2e6:	20 91 a9 04 	lds	r18, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
 2ea:	20 32       	cpi	r18, 0x20	; 32
 2ec:	21 f0       	breq	.+8      	; 0x2f6 <disabling+0x32>
 2ee:	20 91 a9 04 	lds	r18, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
 2f2:	20 36       	cpi	r18, 0x60	; 96
 2f4:	49 f4       	brne	.+18     	; 0x308 <disabling+0x44>
		{
			correct_pass++;
 2f6:	01 96       	adiw	r24, 0x01	; 1
 2f8:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
 2fc:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
			int y = pin5on;
			PORTF.INTFLAGS=y;
 300:	80 e2       	ldi	r24, 0x20	; 32
 302:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
{
	if (alarm_count==3) alarm();
	if(correct_pass == 0 || correct_pass == 2) // correct pass =1,3 ->6 || 0,2 ->5
	{
		if( (pin5on == PORTF.INTFLAGS) || (pin56on == PORTF.INTFLAGS) )
		{
 306:	36 c0       	rjmp	.+108    	; 0x374 <disabling+0xb0>
			int y = pin5on;
			PORTF.INTFLAGS=y;
		}
		else
		{
			alarm_count++;
 308:	80 91 08 28 	lds	r24, 0x2808	; 0x802808 <alarm_count>
 30c:	90 91 09 28 	lds	r25, 0x2809	; 0x802809 <alarm_count+0x1>
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	80 93 08 28 	sts	0x2808, r24	; 0x802808 <alarm_count>
 316:	90 93 09 28 	sts	0x2809, r25	; 0x802809 <alarm_count+0x1>
			correct_pass=0;
 31a:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
 31e:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
			int y = PORTF.INTFLAGS;
 322:	e0 ea       	ldi	r30, 0xA0	; 160
 324:	f4 e0       	ldi	r31, 0x04	; 4
 326:	81 85       	ldd	r24, Z+9	; 0x09
			PORTF.INTFLAGS=y;
 328:	81 87       	std	Z+9, r24	; 0x09
 32a:	24 c0       	rjmp	.+72     	; 0x374 <disabling+0xb0>
		}
	}
	else if(correct_pass == 1 || correct_pass == 3)
 32c:	81 30       	cpi	r24, 0x01	; 1
 32e:	91 05       	cpc	r25, r1
 330:	19 f0       	breq	.+6      	; 0x338 <disabling+0x74>
 332:	83 30       	cpi	r24, 0x03	; 3
 334:	91 05       	cpc	r25, r1
 336:	f1 f4       	brne	.+60     	; 0x374 <disabling+0xb0>
	{
		if(pin6on == PORTF.INTFLAGS)
 338:	20 91 a9 04 	lds	r18, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
 33c:	20 34       	cpi	r18, 0x40	; 64
 33e:	49 f4       	brne	.+18     	; 0x352 <disabling+0x8e>
		{
			correct_pass++;
 340:	01 96       	adiw	r24, 0x01	; 1
 342:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
 346:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
			int y = pin6on;
			PORTF.INTFLAGS=y;
 34a:	80 e4       	ldi	r24, 0x40	; 64
 34c:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
 350:	11 c0       	rjmp	.+34     	; 0x374 <disabling+0xb0>
		}
		else
		{
			alarm_count++;
 352:	80 91 08 28 	lds	r24, 0x2808	; 0x802808 <alarm_count>
 356:	90 91 09 28 	lds	r25, 0x2809	; 0x802809 <alarm_count+0x1>
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	80 93 08 28 	sts	0x2808, r24	; 0x802808 <alarm_count>
 360:	90 93 09 28 	sts	0x2809, r25	; 0x802809 <alarm_count+0x1>
			correct_pass=0;
 364:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
 368:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
			int y = PORTF.INTFLAGS;
 36c:	e0 ea       	ldi	r30, 0xA0	; 160
 36e:	f4 e0       	ldi	r31, 0x04	; 4
 370:	81 85       	ldd	r24, Z+9	; 0x09
			PORTF.INTFLAGS=y;
 372:	81 87       	std	Z+9, r24	; 0x09
		}
	}
	if(correct_pass == 4)
 374:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 378:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 37c:	04 97       	sbiw	r24, 0x04	; 4
 37e:	f9 f4       	brne	.+62     	; 0x3be <disabling+0xfa>
	{
		alarm_count=0;
 380:	10 92 08 28 	sts	0x2808, r1	; 0x802808 <alarm_count>
 384:	10 92 09 28 	sts	0x2809, r1	; 0x802809 <alarm_count+0x1>
		alarm_mode=0;
 388:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <alarm_mode>
 38c:	10 92 07 28 	sts	0x2807, r1	; 0x802807 <alarm_mode+0x1>
		timer_mode = 0;
 390:	10 92 04 28 	sts	0x2804, r1	; 0x802804 <timer_mode>
 394:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <timer_mode+0x1>
		alarm_brake = 0;
 398:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <alarm_brake>
 39c:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <alarm_brake+0x1>
		correct_pass =0;
 3a0:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
 3a4:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
		ADC0.CTRLA = 0; //disable adc
 3a8:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
		TCA0.SINGLE.CTRLA = 0; //disable tca
 3ac:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f4a00>
		PORTD.OUT= PIN0_bm; // Led is off
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <__TEXT_REGION_LENGTH__+0x7f4464>
		int y = PORTF.INTFLAGS;
 3b6:	e0 ea       	ldi	r30, 0xA0	; 160
 3b8:	f4 e0       	ldi	r31, 0x04	; 4
 3ba:	81 85       	ldd	r24, Z+9	; 0x09
		PORTF.INTFLAGS=y;
 3bc:	81 87       	std	Z+9, r24	; 0x09
 3be:	08 95       	ret

000003c0 <__vector_29>:
	while (1){;}

}

ISR(PORTF_PORT_vect)
{
 3c0:	1f 92       	push	r1
 3c2:	0f 92       	push	r0
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	0f 92       	push	r0
 3c8:	11 24       	eor	r1, r1
 3ca:	2f 93       	push	r18
 3cc:	3f 93       	push	r19
 3ce:	4f 93       	push	r20
 3d0:	5f 93       	push	r21
 3d2:	6f 93       	push	r22
 3d4:	7f 93       	push	r23
 3d6:	8f 93       	push	r24
 3d8:	9f 93       	push	r25
 3da:	af 93       	push	r26
 3dc:	bf 93       	push	r27
 3de:	ef 93       	push	r30
 3e0:	ff 93       	push	r31
	cli();
 3e2:	f8 94       	cli
	if(alarm_mode==0) enabling();
 3e4:	80 91 06 28 	lds	r24, 0x2806	; 0x802806 <alarm_mode>
 3e8:	90 91 07 28 	lds	r25, 0x2807	; 0x802807 <alarm_mode+0x1>
 3ec:	00 97       	sbiw	r24, 0x00	; 0
 3ee:	19 f4       	brne	.+6      	; 0x3f6 <__vector_29+0x36>
 3f0:	0e 94 88 00 	call	0x110	; 0x110 <enabling>
 3f4:	04 c0       	rjmp	.+8      	; 0x3fe <__vector_29+0x3e>
	else if(alarm_mode==1) disabling();
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	11 f4       	brne	.+4      	; 0x3fe <__vector_29+0x3e>
 3fa:	0e 94 62 01 	call	0x2c4	; 0x2c4 <disabling>
	sei();
 3fe:	78 94       	sei
}
 400:	ff 91       	pop	r31
 402:	ef 91       	pop	r30
 404:	bf 91       	pop	r27
 406:	af 91       	pop	r26
 408:	9f 91       	pop	r25
 40a:	8f 91       	pop	r24
 40c:	7f 91       	pop	r23
 40e:	6f 91       	pop	r22
 410:	5f 91       	pop	r21
 412:	4f 91       	pop	r20
 414:	3f 91       	pop	r19
 416:	2f 91       	pop	r18
 418:	0f 90       	pop	r0
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	0f 90       	pop	r0
 41e:	1f 90       	pop	r1
 420:	18 95       	reti

00000422 <__vector_9>:
	PORTD.OUTCLR = PIN0_bm; //LED is on
	sei();
}

ISR(TCA0_CMP0_vect)
{
 422:	1f 92       	push	r1
 424:	0f 92       	push	r0
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	0f 92       	push	r0
 42a:	11 24       	eor	r1, r1
 42c:	2f 93       	push	r18
 42e:	3f 93       	push	r19
 430:	4f 93       	push	r20
 432:	5f 93       	push	r21
 434:	6f 93       	push	r22
 436:	7f 93       	push	r23
 438:	8f 93       	push	r24
 43a:	9f 93       	push	r25
 43c:	af 93       	push	r26
 43e:	bf 93       	push	r27
 440:	ef 93       	push	r30
 442:	ff 93       	push	r31
	cli();
 444:	f8 94       	cli
	if (alarm_brake==1) alarm();//einai o metrhthts ths adc
 446:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <alarm_brake>
 44a:	90 91 03 28 	lds	r25, 0x2803	; 0x802803 <alarm_brake+0x1>
 44e:	01 97       	sbiw	r24, 0x01	; 1
 450:	11 f4       	brne	.+4      	; 0x456 <__vector_9+0x34>
 452:	0e 94 39 01 	call	0x272	; 0x272 <alarm>
	if(!timer_mode)//timer
 456:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <timer_mode>
 45a:	90 91 05 28 	lds	r25, 0x2805	; 0x802805 <timer_mode+0x1>
 45e:	89 2b       	or	r24, r25
 460:	89 f4       	brne	.+34     	; 0x484 <__vector_9+0x62>
	{
		ADC0.INTCTRL |= ADC_WCMP_bm; //Enable Interrupts for WCM
 462:	e0 e0       	ldi	r30, 0x00	; 0
 464:	f6 e0       	ldi	r31, 0x06	; 6
 466:	82 85       	ldd	r24, Z+10	; 0x0a
 468:	82 60       	ori	r24, 0x02	; 2
 46a:	82 87       	std	Z+10, r24	; 0x0a
		ADC0.CTRLA |= ADC_RESSEL_10BIT_gc; //10-bit resolution
 46c:	80 81       	ld	r24, Z
 46e:	80 83       	st	Z, r24
		ADC0.CTRLA |= ADC_FREERUN_bm; //Free-Running mode enabled
 470:	80 81       	ld	r24, Z
 472:	82 60       	ori	r24, 0x02	; 2
 474:	80 83       	st	Z, r24
		ADC0.CTRLA |= ADC_ENABLE_bm; //Enable ADC
 476:	80 81       	ld	r24, Z
 478:	81 60       	ori	r24, 0x01	; 1
 47a:	80 83       	st	Z, r24
		ADC0.COMMAND |= ADC_STCONV_bm; //Start Conversion
 47c:	80 85       	ldd	r24, Z+8	; 0x08
 47e:	81 60       	ori	r24, 0x01	; 1
 480:	80 87       	std	Z+8, r24	; 0x08
 482:	03 c0       	rjmp	.+6      	; 0x48a <__vector_9+0x68>
	}
	else//pwm cmp
	{
		PORTD.OUT = PIN0_bm; //LED is off
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <__TEXT_REGION_LENGTH__+0x7f4464>
	}
	
	int intflags = TCA0.SINGLE.INTFLAGS;
 48a:	e0 e0       	ldi	r30, 0x00	; 0
 48c:	fa e0       	ldi	r31, 0x0A	; 10
 48e:	83 85       	ldd	r24, Z+11	; 0x0b
	TCA0.SINGLE.INTFLAGS = intflags;
 490:	83 87       	std	Z+11, r24	; 0x0b
	sei();
 492:	78 94       	sei
}
 494:	ff 91       	pop	r31
 496:	ef 91       	pop	r30
 498:	bf 91       	pop	r27
 49a:	af 91       	pop	r26
 49c:	9f 91       	pop	r25
 49e:	8f 91       	pop	r24
 4a0:	7f 91       	pop	r23
 4a2:	6f 91       	pop	r22
 4a4:	5f 91       	pop	r21
 4a6:	4f 91       	pop	r20
 4a8:	3f 91       	pop	r19
 4aa:	2f 91       	pop	r18
 4ac:	0f 90       	pop	r0
 4ae:	0f be       	out	0x3f, r0	; 63
 4b0:	0f 90       	pop	r0
 4b2:	1f 90       	pop	r1
 4b4:	18 95       	reti

000004b6 <_exit>:
 4b6:	f8 94       	cli

000004b8 <__stop_program>:
 4b8:	ff cf       	rjmp	.-2      	; 0x4b8 <__stop_program>
